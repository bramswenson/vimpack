#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
begin
  require 'vimpack'
rescue LoadError => e
  $LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
  require 'vimpack'
end

USAGE = <<-EOU
Manage bundles of vim scripts and vimrc

Usage:

  vimpack <subcommand>
  vimpack <subcommand> --help     - Get more detailed help on subcommands
  vimpack init [repo_url]         - Initialize vimpack repository
  vimpack search <string>         - Search for scripts
  vimpack install <script_name>   - Install scripts
  vimpack uninstall <script_name> - Uninstall scripts
  vimpack list                    - List installed scripts
  vimpack info <script_name>      - Get detailed info on a script
  vimpack git remote <repo_url>   - set vimpack repo origin
  vimpack git commit [message]    - Commit vimpack repo
  vimpack git push                - Push vimpack repo to origin/master
  vimpack git publish             - Publish vimpack repo (commit and push)
EOU

SUB_COMMANDS = %w{ init search install uninstall list info git }
global_opts = Trollop::options do
  version 'vimpack 0.0.1 (c) 2011 Bram Swenson'
  banner USAGE
  stop_on SUB_COMMANDS
end

cmd = ARGV.shift
unless SUB_COMMANDS.include?(cmd)
  Trollop::die USAGE
end

case cmd
when 'init'
  options = Trollop::options do
    banner 'vimpack init [repo_url] - Initialize vimpack repository'
    opt :home_directory, 'The home directory of the user', :short => '-d', :default => ENV['HOME']
  end
  Vimpack::Commands::Init.run(options, ARGV)
when 'search'
  options = Trollop::options do
    banner 'vimpack search <string> - Search for vim scripts'
    opt :utility, 'Search for utility scripts', :short => '-u'
    opt :color_scheme, 'Search for color scheme scripts', :short => '-c'
    opt :syntax, 'Search for syntax scripts', :short => '-s'
    opt :indent, 'Search for indent scripts', :short => '-i'
    opt :game, 'Search for game scripts', :short => '-g'
    opt :plugin, 'Search for plugin scripts', :short => '-p'
    opt :patch, 'Search for patch scripts', :short => '-a'
  end
  Vimpack::Commands::Search.run(options, ARGV)
when 'install'
  options = Trollop::options do
    banner 'vimpack install <script_name> [script_name] - Install vim scripts'
  end
  Vimpack::Commands::Install.run(options, ARGV)
when 'uninstall'
  options = Trollop::options do
    banner 'vimpack uninstall <script_name> [script_name] - Uninstall vim scripts'
  end
  Vimpack::Commands::Uninstall.run(options, ARGV)
when 'list'
  options = Trollop::options do
    banner 'vimpack list - List installed vim scripts'
  end
  Vimpack::Commands::List.run(options, ARGV)
when 'info'
  options = Trollop::options do
    banner 'vimpack info <script_name> - Get detailed information on a vim script'
  end
  Vimpack::Commands::Info.run(options, ARGV)
when 'git'
  options = Trollop::options do
    banner <<-EOB
vimpack git remote <repo_url> - Set vimpack repo remote origin
vimpack git commit [message]  - Commit vimpack repo
vimpack git push              - Push vimpack repo to origin/master
vimpack git publish           - Publish vimpack repo (commit and push)
EOB
    opt :force, 'force the git command', :short => '-f', :default => false
  end
  Vimpack::Commands::Git.run(options, ARGV)
else
  puts "command not found: #{cmd}"
  Trollop::die USAGE
end

